# a code to import pandas library which is used for handling and analyzing tabular data (rows and columns), making it easy to clean, transform, and explore datasets
import pandas as pd

#another code to import numpy library which is used for scientific computing with Python, providing support for large, multi-dimensional arrays and matrices, along with a large
import numpy as np

#matplotlib library is used for creating static, animated, and interactive visualizations in Python.
import matplotlib.pyplot as plt

#seaborn library is a Python data visualization library based on matplotlib. It provides a high-level interface for creating informative and attractive statistical graphics.
#It is built on top of matplotlib and provides a high-level interface for creating various types of plots
import seaborn as sns

import pandas as pd

data_path = "/Workspace/Users/tselale2002@gmail.com/Viewership Analysis -Data.csv"
data = pd.read_csv(
    data_path,
    on_bad_lines='skip'
)
display(data)
data.describe()

data.shape

# Count total number of unique CustomerId

df.select("CustomerID").distinct().count()

from pyspark.sql.functions import col, count, when

# Count missing values (nulls) per column
missing_values = df.select([count(when(col(c).isNull(), c)).alias(c) for c in df.columns])

# Display the result
display(missing_values)

# the resulst shows that we dont have any missing  values in the dataset

# Count total duplicate rows,it checks for rows where all column values are identical and counts how many such duplicate rows exist.
duplicate_count = df.groupBy(df.columns).count().filter(col("count") > 1).agg({"count": "sum"}).withColumnRenamed("sum(count)", "duplicate_count")
display(duplicate_count)

# Remove duplicates based on all columns
df_clean = df.dropDuplicates()

# Display the cleaned DataFrame
display(df_clean)

# Total rows before removing duplicates
print("Rows before removing duplicates:", df.count())

# Total rows after removing duplicates
df_clean = df.dropDuplicates()
print("Rows after removing duplicates:", df_clean.count())

#Univariate Analysis
# Number of unique customers
df.select("CustomerID").distinct().count()
